{"message":"unresolved import `linfa_bayes`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":350,"byte_end":361,"line_start":17,"line_end":17,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"use linfa_bayes::{GaussianNb, Result};","highlight_start":5,"highlight_end":16}],"label":"use of undeclared crate or module `linfa_bayes`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is a crate or module with a similar name","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":350,"byte_end":361,"line_start":17,"line_end":17,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"use linfa_bayes::{GaussianNb, Result};","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":"linfa_trees","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `linfa_bayes`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:17:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse linfa_bayes::{GaussianNb, Result};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `linfa_bayes`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a crate or module with a similar name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse \u001b[0m\u001b[0m\u001b[38;5;10mlinfa_trees\u001b[0m\u001b[0m::{GaussianNb, Result};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"type annotations needed","code":{"code":"E0283","explanation":"An implementation cannot be chosen unambiguously because of lack of information.\n\nErroneous code example:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"/Users/squeeko/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.15.6/src/slice.rs","byte_start":27861,"byte_end":27918,"line_start":861,"line_end":861,"column_start":9,"column_end":66,"is_primary":true,"text":[{"text":"        <$crate::SliceInfoElem as ::core::convert::From<_>>::from($r)","highlight_start":9,"highlight_end":66}],"label":"cannot infer type of the type parameter `Self` declared on the trait `From`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/squeeko/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.15.6/src/slice.rs","byte_start":25658,"byte_end":25680,"line_start":802,"line_end":802,"column_start":37,"column_end":59,"is_primary":false,"text":[{"text":"                        [$($stack)* $crate::s!(@convert r)],","highlight_start":37,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/squeeko/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.15.6/src/slice.rs","byte_start":26909,"byte_end":27162,"line_start":835,"line_end":840,"column_start":17,"column_end":18,"is_primary":false,"text":[{"text":"                $crate::s![@parse","highlight_start":17,"highlight_end":34},{"text":"                   $crate::SliceNextDim::next_in_dim(&r, $in_dim),","highlight_start":1,"highlight_end":67},{"text":"                   $crate::SliceNextDim::next_out_dim(&r, $out_dim),","highlight_start":1,"highlight_end":69},{"text":"                   [$($stack)* $crate::s!(@convert r),]","highlight_start":1,"highlight_end":56},{"text":"                   $($t)*","highlight_start":1,"highlight_end":26},{"text":"                ]","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/squeeko/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.15.6/src/slice.rs","byte_start":28231,"byte_end":28412,"line_start":870,"line_end":875,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::s![@parse","highlight_start":9,"highlight_end":26},{"text":"              ::core::marker::PhantomData::<$crate::Ix0>,","highlight_start":1,"highlight_end":58},{"text":"              ::core::marker::PhantomData::<$crate::Ix0>,","highlight_start":1,"highlight_end":58},{"text":"              []","highlight_start":1,"highlight_end":17},{"text":"              $($t)*","highlight_start":1,"highlight_end":21},{"text":"        ]","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":725,"byte_end":737,"line_start":24,"line_end":24,"column_start":26,"column_end":38,"is_primary":false,"text":[{"text":"        data_array.slice(s![.., 0..8]).to_owned(),","highlight_start":26,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"s!","def_site_span":{"file_name":"/Users/squeeko/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.15.6/src/slice.rs","byte_start":24522,"byte_end":24536,"line_start":775,"line_end":775,"column_start":1,"column_end":15,"is_primary":false,"text":[{"text":"macro_rules! s(","highlight_start":1,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::s!","def_site_span":{"file_name":"/Users/squeeko/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.15.6/src/slice.rs","byte_start":24522,"byte_end":24536,"line_start":775,"line_end":775,"column_start":1,"column_end":15,"is_primary":false,"text":[{"text":"macro_rules! s(","highlight_start":1,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::s!","def_site_span":{"file_name":"/Users/squeeko/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.15.6/src/slice.rs","byte_start":24522,"byte_end":24536,"line_start":775,"line_end":775,"column_start":1,"column_end":15,"is_primary":false,"text":[{"text":"macro_rules! s(","highlight_start":1,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::s!","def_site_span":{"file_name":"/Users/squeeko/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.15.6/src/slice.rs","byte_start":24522,"byte_end":24536,"line_start":775,"line_end":775,"column_start":1,"column_end":15,"is_primary":false,"text":[{"text":"macro_rules! s(","highlight_start":1,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"multiple `impl`s satisfying `SliceInfoElem: From<std::ops::Range<{integer}>>` found in the `ndarray` crate:\n- impl From<std::ops::Range<i32>> for SliceInfoElem;\n- impl From<std::ops::Range<isize>> for SliceInfoElem;\n- impl From<std::ops::Range<usize>> for SliceInfoElem;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:24:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        data_array.slice(s![.., 0..8]).to_owned(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type of the type parameter `Self` declared on the trait `From`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `SliceInfoElem: From<std::ops::Range<{integer}>>` found in the `ndarray` crate:\u001b[0m\n\u001b[0m           - impl From<std::ops::Range<i32>> for SliceInfoElem;\u001b[0m\n\u001b[0m           - impl From<std::ops::Range<isize>> for SliceInfoElem;\u001b[0m\n\u001b[0m           - impl From<std::ops::Range<usize>> for SliceInfoElem;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::s` which comes from the expansion of the macro `s` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unused import: `Fit`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":331,"byte_end":334,"line_start":16,"line_end":16,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"use linfa::traits::{Fit, Predict};","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Fit`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:16:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse linfa::traits::{Fit, Predict};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `Predict`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":336,"byte_end":343,"line_start":16,"line_end":16,"column_start":26,"column_end":33,"is_primary":true,"text":[{"text":"use linfa::traits::{Fit, Predict};","highlight_start":26,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Predict`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:16:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse linfa::traits::{Fit, Predict};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `linfa::metrics::ToConfusionMatrix`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":276,"byte_end":309,"line_start":15,"line_end":15,"column_start":5,"column_end":38,"is_primary":true,"text":[{"text":"use linfa::metrics::ToConfusionMatrix;","highlight_start":5,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `linfa::metrics::ToConfusionMatrix`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:15:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse linfa::metrics::ToConfusionMatrix;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0283, E0432.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0283, E0432.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0283`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0283`.\u001b[0m\n"}
